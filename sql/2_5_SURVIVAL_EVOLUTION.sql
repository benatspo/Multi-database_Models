ALTER TABLE SQL_NOSQL_REPOSITORY_DEPENDENCIES ADD COLUMN DBMS_CODE INTEGER;
ALTER TABLE SQL_NOSQL_REPOSITORY_DEPENDENCIES ADD COLUMN DBMS_TYPE_CODE INTEGER;
ALTER TABLE SQL_NOSQL_REPOSITORY_DEPENDENCIES ADD COLUMN VERSION_CODE INTEGER;

UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET DBMS_TYPE_CODE = 00001 WHERE DBMS_TYPE = 'RelationalDB';
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET DBMS_TYPE_CODE = 00010 WHERE DBMS_TYPE = 'DocumentDB';
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET DBMS_TYPE_CODE = 00100 WHERE DBMS_TYPE = 'KeyValueDB';
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET DBMS_TYPE_CODE = 01000 WHERE DBMS_TYPE = 'ColumnDB';
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET DBMS_TYPE_CODE = 10000 WHERE DBMS_TYPE = 'GraphDB';

UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET VERSION_CODE = 1 WHERE DATASET_VERSION = 20170721;
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET VERSION_CODE = 2 WHERE DATASET_VERSION = 20171129;
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET VERSION_CODE = 3 WHERE DATASET_VERSION = 20180313;
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET VERSION_CODE = 4 WHERE DATASET_VERSION = 20181222;
UPDATE SQL_NOSQL_REPOSITORY_DEPENDENCIES SET VERSION_CODE = 5 WHERE DATASET_VERSION = 20200112;


CREATE INDEX "SQL_NOSQL_REPOSITORY_DEPENDENCIES-DBMS_TYPE_CODE" ON SQL_NOSQL_REPOSITORY_DEPENDENCIES(DBMS_TYPE_CODE);
CREATE INDEX "SQL_NOSQL_REPOSITORY_DEPENDENCIES-VERSION_CODE" ON SQL_NOSQL_REPOSITORY_DEPENDENCIES(VERSION_CODE);

CREATE TABLE SQL_NOSQL_DBMS_TYPE_SURVIVAL AS
    SELECT T1.REPOSITORY_NAME AS REPOSITORY_NAME, T1.VERSION_CODE AS VERSION_1, T2.VERSION_CODE AS VERSION_2, SUM(DISTINCT T1.DBMS_TYPE_CODE) as DBMS_TYPE_SOURCE, SUM(DISTINCT T2.DBMS_TYPE_CODE) as DBMS_TYPE_TARGET
    FROM SQL_NOSQL_REPOSITORY_DEPENDENCIES T1, SQL_NOSQL_REPOSITORY_DEPENDENCIES T2
    WHERE T1.REPOSITORY_NAME = T2.REPOSITORY_NAME
    AND T2.VERSION_CODE = T1.VERSION_CODE + 1
    GROUP BY T1.REPOSITORY_NAME, T1.VERSION_CODE, T2.VERSION_CODE
    HAVING DBMS_TYPE_SOURCE <> DBMS_TYPE_TARGET
    ORDER BY T1.REPOSITORY_NAME, T1.VERSION_CODE, T2.VERSION_CODE
;

CREATE TABLE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS(
  NAME VARCHAR2,
  COUNT INTEGER DEFAULT 0,
  DBMS_TYPE_SOURCE,
  DBMS_TYPE_TARGET,
  DBMS_TYPE_EVOLUTION_TYPE VARCHAR2
);

INSERT INTO SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS (NAME, DBMS_TYPE_SOURCE, DBMS_TYPE_TARGET, COUNT)
   SELECT DBMS_TYPE_SOURCE || ' -> ' || DBMS_TYPE_TARGET, DBMS_TYPE_SOURCE, DBMS_TYPE_TARGET, COUNT(*) from SQL_NOSQL_DBMS_TYPE_SURVIVAL group by (DBMS_TYPE_SOURCE || ' -> ' || DBMS_TYPE_TARGET) ORDER BY COUNT (*) DESC
;

CREATE TABLE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO(
  REPOSITORY_NAME VARCHAR2,
  NAME VARCHAR2,
  DBMS_TYPE_SOURCE,
  DBMS_TYPE_TARGET,
  MIN_VERSION INTEGER,
  MAX_VERSION INTEGER,
  FILTERED_REPO BOOLEAN DEFAULT FALSE,
  CYCLIC_DBMS_TYPE_EVOLUTION_TYPE BOOLEAN DEFAULT FALSE,
  DBMS_TYPE_EVOLUTION_TYPE VARCHAR2,
  GLOBAL_DBMS_TYPE_EVOLUTION VARCHAR2,
  GLOBAL_DBMS_TYPE_EVOLUTION_COUNT INTEGER
);


INSERT INTO SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO (REPOSITORY_NAME, NAME, DBMS_TYPE_SOURCE, DBMS_TYPE_TARGET, MIN_VERSION, MAX_VERSION)
SELECT REPOSITORY_NAME, DBMS_TYPE_SOURCE || ' -> ' || DBMS_TYPE_TARGET, DBMS_TYPE_SOURCE, DBMS_TYPE_TARGET, MIN(VERSION_1), MAX(VERSION_2) from SQL_NOSQL_DBMS_TYPE_SURVIVAL group by (DBMS_TYPE_SOURCE || ' -> ' || DBMS_TYPE_TARGET), REPOSITORY_NAME ORDER BY COUNT (*) DESC
;

ALTER TABLE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO ADD DBMS_TYPE_EVOLUTION_TYPE_NB_OCCURENCE INTEGER;

UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO set DBMS_TYPE_EVOLUTION_TYPE_NB_OCCURENCE = (
    SELECT count(*)
    FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO repo
    WHERE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO.DBMS_TYPE_SOURCE = repo.DBMS_TYPE_SOURCE
    AND SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO.DBMS_TYPE_TARGET = repo.DBMS_TYPE_TARGET
    AND repo.FILTERED_REPO = TRUE
    GROUP BY repo.DBMS_TYPE_SOURCE, repo.DBMS_TYPE_TARGET
)
WHERE DBMS_TYPE_EVOLUTION_TYPE_NB_OCCURENCE IS NULL;


ALTER TABLE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO ADD COLUMN GLOBAL_DBMS_TYPE_EVOLUTION_COUNT_FILTERED INTEGER;
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION_COUNT_FILTERED = (
    (
        SELECT COUNT(*)
        FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO repo
        WHERE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO.DBMS_TYPE_SOURCE = repo.DBMS_TYPE_SOURCE
        AND SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO.DBMS_TYPE_TARGET = repo.DBMS_TYPE_TARGET
        AND FILTERED_REPO = TRUE
        GROUP BY repo.DBMS_TYPE_SOURCE, repo.DBMS_TYPE_TARGET
    )
);

UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET FILTERED_REPO = TRUE WHERE REPOSITORY_NAME IN ( SELECT REPOSITORY_NAME FROM FILTERED_SQL_NOSQL_REPOSITORY_DEPENDENCIES );

UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET CYCLIC_DBMS_TYPE_EVOLUTION_TYPE = TRUE WHERE REPOSITORY_NAME IN (
    SELECT repo1.REPOSITORY_NAME
    FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO repo1
    JOIN SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO repo2 ON repo1.REPOSITORY_NAME = repo2.REPOSITORY_NAME
    WHERE repo1.DBMS_TYPE_SOURCE = repo2.DBMS_TYPE_TARGET
      AND repo1.MIN_VERSION = (SELECT MIN(MIN_VERSION)
                               FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO
                               WHERE REPOSITORY_NAME = repo1.REPOSITORY_NAME)
      AND repo2.MAX_VERSION = (SELECT MAX(MAX_VERSION)
                               FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO
                               WHERE REPOSITORY_NAME = repo2.REPOSITORY_NAME)
);

UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS SET DBMS_TYPE_EVOLUTION_TYPE = 'Change' WHERE LENGTH(REPLACE(DBMS_TYPE_SOURCE, '0', '')) = LENGTH(REPLACE(DBMS_TYPE_TARGET, '0', ''));
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS SET DBMS_TYPE_EVOLUTION_TYPE = 'Addition' WHERE LENGTH(REPLACE(DBMS_TYPE_SOURCE, '0', '')) < LENGTH(REPLACE(DBMS_TYPE_TARGET, '0', ''));
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS SET DBMS_TYPE_EVOLUTION_TYPE = 'Deletion' WHERE LENGTH(REPLACE(DBMS_TYPE_SOURCE, '0', '')) > LENGTH(REPLACE(DBMS_TYPE_TARGET, '0', ''));

UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET DBMS_TYPE_EVOLUTION_TYPE = 'Change' WHERE LENGTH(REPLACE(DBMS_TYPE_SOURCE, '0', '')) = LENGTH(REPLACE(DBMS_TYPE_TARGET, '0', ''));
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET DBMS_TYPE_EVOLUTION_TYPE = 'Addition' WHERE LENGTH(REPLACE(DBMS_TYPE_SOURCE, '0', '')) < LENGTH(REPLACE(DBMS_TYPE_TARGET, '0', ''));
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET DBMS_TYPE_EVOLUTION_TYPE = 'Deletion' WHERE LENGTH(REPLACE(DBMS_TYPE_SOURCE, '0', '')) > LENGTH(REPLACE(DBMS_TYPE_TARGET, '0', ''));

--For repositories having only one evolution
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = DBMS_TYPE_EVOLUTION_TYPE WHERE REPOSITORY_NAME IN (
    SELECT REPOSITORY_NAME
    FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO
    GROUP BY REPOSITORY_NAME
    HAVING COUNT() = 1
) AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;
--For repositories having 2 evolutions, but cyclic
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = 'None' WHERE REPOSITORY_NAME IN (
    SELECT REPOSITORY_NAME
    FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO
    WHERE CYCLIC_DBMS_TYPE_EVOLUTION_TYPE = TRUE
    GROUP BY REPOSITORY_NAME
    HAVING COUNT() = 2
) AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;


--For repositories having 2 evolutions, manual checking
--UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = 'Change'
--WHERE REPOSITORY_NAME IN ('camptocamp/c2cgeoform', 'firebase/firebase-js-sdk', 'gauravtiwari5050/rihandjs', 'netms/jsvr', 'pub-comp/caching', 'satnami/backstroke', 'yunojuno/django-request-token') AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;

--UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = 'Addition'
--WHERE REPOSITORY_NAME IN ('Itee/itee-server', 'eseom/hails', 'iyobo/jollofjs', 'melalj/petitservice', 'mycoboco/canary', 'nubiofs/estudo', 'riwcwt/remoting', 'the-labo/the-scaffold', 'vert-x3/vertx-stack') AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;

--UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = 'Deletion'
--WHERE REPOSITORY_NAME IN ('spring-cloud/spring-cloud-dataflow') AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;

--UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = 'Change + Addition'
--WHERE REPOSITORY_NAME IN ('DemocracyClub/WhoCanIVoteFor', 'Kinto/kinto', 'Python-Tools/pmfp', 'Royal-Society-of-New-Zealand/NZ-ORCID-Hub', 'dssg/triage', 'genialis/resolwe', 'is00hcw/gitwork', 'willemarcel/osmcha-django') AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;

--UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = 'Change + Deletion'
--WHERE REPOSITORY_NAME IN ('') AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;

----For repositories having 3 evolutions
--UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO SET GLOBAL_DBMS_TYPE_EVOLUTION = 'Addition' WHERE REPOSITORY_NAME IN ('camptocamp/c2cwsgiutils', 'gladjs/glad') AND GLOBAL_DBMS_TYPE_EVOLUTION IS NULL;


CREATE TABLE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO_GLOBAL (
    REPOSITORY_NAME VARCHAR2,
    MIN_VERSION INTEGER,
    MAX_VERSION INTEGER,
    SOURCE_STATE VARCHAR2,
    FINAL_STATE VARCHAR2,
    NB_SOURCE_DBMS_TYPES INTEGER,
    NB_FINAL_DBMS_TYPES INTEGER,
    NB_EVOLUTION INTEGER,
    SOURCE_STATE_TEXT VARCHAR2,
    FINAL_STATE_TEXT VARCHAR2,
    GLOBAL_EVOLUTION_TYPE VARCHAR2,
    GLOBAL_EVOLUTION_TYPE_COUNT INTEGER,
    GLOBAL_EVOLUTION_TYPE_COUNT_FILTERED INTEGER
);
INSERT INTO SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO_GLOBAL (REPOSITORY_NAME, MIN_VERSION, MAX_VERSION, SOURCE_STATE, FINAL_STATE, NB_SOURCE_DBMS_TYPES, NB_FINAL_DBMS_TYPES, NB_EVOLUTION, SOURCE_STATE_TEXT, FINAL_STATE_TEXT, GLOBAL_EVOLUTION_TYPE_COUNT, GLOBAL_EVOLUTION_TYPE_COUNT_FILTERED)
    SELECT REPOSITORY_NAME,
           min(MIN_VERSION)                                                                  AS MIN_VERSION,
           max(MAX_VERSION)                                                                  AS MAX_VERSION,
           SUBSTR(MIN(MIN_VERSION || ':' || DBMS_TYPE_SOURCE), LENGTH(MIN(MIN_VERSION)) + 2) AS SOURCE_STATE,
           SUBSTR(MAX(MAX_VERSION || ':' || DBMS_TYPE_TARGET), LENGTH(MAX(MAX_VERSION)) + 2) AS FINAL_STATE,
           SUBSTR(MIN(MIN_VERSION || ':' || LENGTH(REPLACE(DBMS_TYPE_SOURCE, '0', ''))), LENGTH(MIN(MIN_VERSION)) + 2) AS NB_SOURCE_DBMS_TYPES,
           SUBSTR(MAX(MAX_VERSION || ':' || LENGTH(REPLACE(DBMS_TYPE_TARGET, '0', ''))), LENGTH(MAX(MAX_VERSION)) + 2) AS NB_FINAL_DBMS_TYPES,
           COUNT()                                                                           AS NB_EVOLUTION,
           CASE SUBSTR(MIN(MIN_VERSION || ':' || DBMS_TYPE_SOURCE), LENGTH(MIN(MIN_VERSION)) + 2)
               WHEN '1' THEN 'R'
               WHEN '10' THEN 'D'
               WHEN '11' THEN 'R + D'
               WHEN '100' THEN 'K'
               WHEN '101' THEN 'R + K'
               WHEN '110' THEN 'D + K'
               WHEN '111' THEN 'R + D + K'
               WHEN '1000' THEN 'C'
               WHEN '1001' THEN 'R + C'
               WHEN '1010' THEN 'D + C'
               WHEN '1100' THEN 'K + C'
               WHEN '1011' THEN 'R + D + C'
               WHEN '1110' THEN 'D + K + C'
               WHEN '1101' THEN 'R + K + C'
               WHEN '1111' THEN 'R + D + K + C'
               WHEN '10000' THEN 'G'
               WHEN '10001' THEN 'R + G'
               WHEN '10010' THEN 'D + G'
               WHEN '10100' THEN 'K + G'
               WHEN '11000' THEN 'C + G'
               WHEN '10011' THEN 'R + D + G'
               WHEN '10110' THEN 'D + K + G'
               WHEN '11100' THEN 'K + C + G'
               WHEN '10101' THEN 'R + K + G'
               WHEN '10111' THEN 'R + D + K + G'
               WHEN '11001' THEN 'R + C + G'
               WHEN '11110' THEN 'D + K + C + G'
               WHEN '11111' THEN 'R + D + K + C + G'
               ELSE SUBSTR(MIN(MIN_VERSION || ':' || DBMS_TYPE_SOURCE), LENGTH(MIN(MIN_VERSION)) + 2)
           END AS SOURCE_STATE_TEXT,
           CASE SUBSTR(MIN(MAX_VERSION || ':' || DBMS_TYPE_TARGET), LENGTH(MIN(MAX_VERSION)) + 2)
               WHEN '1' THEN 'R'
               WHEN '10' THEN 'D'
               WHEN '11' THEN 'R + D'
               WHEN '100' THEN 'K'
               WHEN '101' THEN 'R + K'
               WHEN '110' THEN 'D + K'
               WHEN '111' THEN 'R + D + K'
               WHEN '1000' THEN 'C'
               WHEN '1001' THEN 'R + C'
               WHEN '1010' THEN 'D + C'
               WHEN '1100' THEN 'K + C'
               WHEN '1011' THEN 'R + D + C'
               WHEN '1110' THEN 'D + K + C'
               WHEN '1101' THEN 'R + K + C'
               WHEN '1111' THEN 'R + D + K + C'
               WHEN '10000' THEN 'G'
               WHEN '10001' THEN 'R + G'
               WHEN '10010' THEN 'D + G'
               WHEN '10100' THEN 'K + G'
               WHEN '11000' THEN 'C + G'
               WHEN '10011' THEN 'R + D + G'
               WHEN '10110' THEN 'D + K + G'
               WHEN '11100' THEN 'K + C + G'
               WHEN '10101' THEN 'R + K + G'
               WHEN '10111' THEN 'R + D + K + G'
               WHEN '11001' THEN 'R + C + G'
               WHEN '11110' THEN 'D + K + C + G'
               WHEN '11111' THEN 'R + D + K + C + G'
               ELSE SUBSTR(MIN(MAX_VERSION || ':' || DBMS_TYPE_TARGET), LENGTH(MIN(MAX_VERSION)) + 2)
           END AS FINAL_STATE_TEXT,
           GLOBAL_DBMS_TYPE_EVOLUTION_COUNT,
           SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO.GLOBAL_DBMS_TYPE_EVOLUTION_COUNT_FILTERED
    FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO
    --WHERE FILTERED_REPO = TRUE
    --WHERE REPOSITORY_NAME IN (
    --    SELECT REPOSITORY_NAME
    --    FROM SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO
    --    GROUP BY REPOSITORY_NAME
    --    HAVING COUNT() > 1
    --    'Itee/itee-server'
    --)
WHERE FILTERED_REPO = TRUE
GROUP BY REPOSITORY_NAME
ORDER BY COUNT() DESC
--)
;

UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO_GLOBAL SET GLOBAL_EVOLUTION_TYPE = 'Stay mono-database' WHERE NB_SOURCE_DBMS_TYPES = NB_FINAL_DBMS_TYPES AND NB_SOURCE_DBMS_TYPES = 1;
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO_GLOBAL SET GLOBAL_EVOLUTION_TYPE = 'Stay hybrid' WHERE NB_SOURCE_DBMS_TYPES > 1 AND NB_FINAL_DBMS_TYPES > 1;
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO_GLOBAL SET GLOBAL_EVOLUTION_TYPE = 'Become mono-database' WHERE NB_SOURCE_DBMS_TYPES > 1 AND NB_FINAL_DBMS_TYPES = 1;
UPDATE SQL_NOSQL_DBMS_TYPE_SURVIVAL_ANALYSIS_REPO_GLOBAL SET GLOBAL_EVOLUTION_TYPE = 'Become hybrid' WHERE NB_SOURCE_DBMS_TYPES = 1 AND NB_FINAL_DBMS_TYPES > 1;